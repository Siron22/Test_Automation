Деление

# Остаток от деления на 5
x % 5

# Целочисленное деление
x // 5

Генераторы списков / словарей

[x * 2 for x in range(0, 10) if x != 5]
a = [x * 2 if x == 5 else x for x in range(0, 10)]
{item[0]: item[1] * 2 for item in dct.items()}

Замыкание

def closure_example():
    x = 5

    def inner():
        print(x)

    return inner

Декораторы

# Простой декоратор
def my_decorator(my_func):

    def inner():
        print('Decorator starts...')
        my_func()
        print('Decorator finishes...')

    return inner


# Декоратор для функции с параметрами
def my_decorator_with_params(my_func):

    def inner(*args, **kwargs):
        print('Decorator starts...')
        my_func(*args, **kwargs)
        print('Decorator finishes...')

    return inner

# Использование декоратора
@my_decorator
def print_hi():
    print('Hi!')

decorated_func = my_decorator(print_hi)
decorated_func()

# Использование декоратора для функции с параметрами
@my_decorator_with_params
def adder(**nums):
    print(sum(nums.values()))


print_hi()
adder(a=1, b=2)


Оператор Match

match command:
    case "quit":
        quit()
    case "reset":
        reset()
    case unknown_command:
        print (f"Unknown command'{unknown_command}'")

Сортировки и фильтры

sorted(lst, key = lambda x: x % 2 == 0)
filtered_lst = list(filter(lambda x: x % 2 == 0, lst))
filtered_dict = dict(filter(lambda item: 'O' in item[1], dct.items()))

Обработка исключений

try:
    f.write('Hello')
except io.UnsupportedOperation as e:
    print('UnsupportedOperation!')
finally:
    print('Releasing resources')
    f.close()


Контекстный менеджер

with open('1.txt', 'w') as f:
    f.write('Hello!')

Встроенные библиотеки

sys, os, os.path, time, datetime, random, collections, json, unittest, re, hashlib, bz2, gzip, tarfile, zipfile

Регулярные выражения

res = re.search('Start(\d+)en(\w)', 'Start123end456')
a = res[0]
# re.match() ищет с начала строки
# re.search() - по всей строке
# re.findall() - только список групп

Виртуальное окружение

source my_project/venv/bin/activate
deactivate

Json

# Создаем json-строку из словаря
dct = {1: 'One', 2: 'Two'}
my_json = json.dumps(dct, indent=4)

# Парсим строку в json
my_str = '{"1": "One", "2": "Two"}'
my_json = json.loads(my_str)

Локаторы в Selenium

class By:
    """
    Set of supported locator strategies.
    """

    ID = "id"
    XPATH = "xpath"
    LINK_TEXT = "link text"
    PARTIAL_LINK_TEXT = "partial link text"
    NAME = "name"
    TAG_NAME = "tag name"
    CLASS_NAME = "class name"
    CSS_SELECTOR = "css selector"










